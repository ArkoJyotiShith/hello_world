/*
House Robber Problem
You are a professional robber planning to rob houses along a street. 
Each house has a certain amount of money stashed, the only constraint 
stopping you from robbing each of them is that adjacent houses have 
security system connected and it will automatically contact the police 
if two adjacent houses were broken into on the same night. 
Given a list of non-negative integers representing the amount of money of each house, 
determine the maximum amount of money you can rob tonight without alerting the police.
*/

/* 
1 <= n <= 1000 Number of houses

1 <= Ai <= 10000 Money in each house
*/

//Recursion

#include<iostream>
using namespace std;
int maxMoney(int arr[], int n){
  if(n<=0)
    return 0;
  int select = arr[n-1]+maxMoney(arr,n-2);
  int notSelect = maxMoney(arr,n-1);
  if(select>notSelect)
    return select;
  else
    return notSelect;
}

int main()
{
  int n;
  cin>>n;
  int arr[n];
  for(int i=0; i<n; i++){
    cin>>arr[i];
  }
  cout<<maxMoney(arr,n);
}


// dynamic mapping

#include<bits/stdc++.h>
using namespace std;
int maxMoney(int arr[], int n, unordered_map<int,int> &map){
  int key =n;
  if(map.find(n)==map.end()){
    if(n<=0){
    	map[key] = 0;
      	return map[key];
    }
    int select = arr[n-1]+maxMoney(arr,n-2,map);
  	int notSelect = maxMoney(arr,n-1,map);
    if(select>notSelect)
    	map[key] = select;
  	else
    	map[key] = notSelect;
    
  }
  return map[key];  
}

int main()
{
  int n;
  cin>>n;
  int arr[n];
  for(int i=0; i<n; i++){
    cin>>arr[i];
  }
  unordered_map<int,int> map;
  cout<<maxMoney(arr,n,map);
}
