
#include <bits/stdc++.h>
using namespace std;

typedef struct node{
    int data;
    struct node *next;
} Node;

Node* reverse(Node *head, int k){
    Node *current=head;
    Node *prev = NULL;
    Node *temp = NULL;
    int count = 0;
    while(current && count<k){
        temp = current->next;
        current->next = prev;
        prev = current;
        current = temp;
        count++;
    }
    if(temp)                          //temp is now k+1 th node. head is now the 
        head->next = reverse(temp,k); //last node of reversed group, so next of
    return prev;                      //head will be head of reversed group
}

void append(Node **head,int x){
    Node *dummy= (Node*)malloc(sizeof(Node));
    dummy->data = x;
    dummy->next = NULL;
    if(*head == NULL)
        *head = dummy;
    else{
        Node *last = *head;
        while(last->next)
            last = last->next;
        last->next = dummy;
    }
    return;
}

int main(){
    int x;
    cin>>x;
    Node *head=NULL;
    while(x>=0){
        append(&head, x);
        cin>>x;
    }
    int k;
  	cin>>k;
    head = reverse(head,k);
    while(head){
        cout<<head->data<<endl;
        head=head->next;
    }
    return 0;
}


//////////////// Using doubly linked list///////


#include <bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data; 
    struct Node *next, *prev;
};

void append(Node **head, int data){
  	Node *temp, *newNode;
  	temp= *head;
  	newNode = new Node();
  	newNode->prev = NULL;
  	newNode->next = NULL;
  	newNode->data= data;
  	if(*head ==NULL)
  	    *head= newNode;
  	else{
  	    while(temp->next)
  	        temp=temp->next;
  	    temp->next = newNode;
  	    newNode->prev = temp;
  	}
}

Node* work(Node *head, int n){
    int count =1, in=0;
    while(head->next){
        head=head->next;
        count++;
    }
    if(n==0 ||n>count)
        return NULL;
    else if(n==1)
        return head;
    else{
        while(head->prev){
            if(in == n-1)
                return head;
            else{
                head=head->prev;
                in++;
            }
        }
    }
        
    
        
}


int main(){
    Node *head = NULL;
    int data,n;
    cin>>data;
    while(data>0){
        append(&head,data);
        cin>>data;
    }
    cin>>n;
    Node *result = work(head, n);
    cout<<"Enter the nth node:"<<endl;
    if(result==NULL)
        cout<<"There is no nth node in the list";
    else
        cout<<result->data<<" is the nth node element in the list";
    return 0;
}
