
#include <bits/stdc++.h>
using namespace std;

typedef struct node{
    long long data;
    struct node *next;
}Node;

void append(Node **head, int x){
    Node *dummy = (Node*)malloc(sizeof(Node));
    dummy->data = x;
    dummy->next = NULL;
    if(*head==NULL)
        *head = dummy;
    else{
        Node *last = *head;
        while(last->next)
            last= last->next;
        last->next = dummy;
    }
    return;
}



void swapbypair(Node *head){
    Node *temp= head;
    while(temp && temp->next){
        int x= temp->data;
        temp->data= temp->next->data;
        temp->next->data = x;
        temp=temp->next->next;
    }
}

int main(){
    long long x;
    cin>>x;
    Node *head = NULL;
    while(x>=0){
        append(&head, x);
        cin>>x;
    }
    swapbypair(head);
    while(head){
        cout<<head->data<<endl;
        head= head->next;
    }
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data; 
    struct Node *next, *prev;
};

void append(Node **head, int data){
  	Node *temp, *newNode;
  	temp= *head;
  	newNode = new Node();
  	newNode->prev = NULL;
  	newNode->next = NULL;
  	newNode->data= data;
  	if(*head ==NULL)
  	    *head= newNode;
  	else{
  	    while(temp->next)
  	        temp=temp->next;
  	    temp->next = newNode;
  	    newNode->prev = temp;
  	}
}

void pairswap(Node *head){
    if(head==NULL){
        cout<<"List is empty";
        return ;
    }
    Node *temp = head;
    while(temp && temp->next){
        swap(temp->data, temp->next->data);
        temp = temp->next->next;
    }
}


int main(){
    Node *head = NULL;
    int data;
    cin>>data;
    while(data>0){
        append(&head,data);
        cin>>data;
    }
    pairswap(head);
  	while(head){
      cout<<head->data<<endl;
      head= head->next;
    }
    return 0;
}
