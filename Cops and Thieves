#include<bits/stdc++.h>
using namespace std;


int main()
{
  int n,k,count=0; //count is ans
  cin>>n;
  char store[n]; //this is array
  vector<int> pol,thief;  //pol = police
  for(int i=0; i<n; i++){
    cin>>store[i];
    if(store[i]=='P')
      	pol.push_back(i); 
    else
      	thief.push_back(i);
  }
  cin>>k;
  int i=0, j=0, m=pol.size(); 
  n=thief.size();
  while(i<m && j<n){
    if(abs(pol[i]-thief[j]<=k)){ //caught
       	count++;
      	i++;
      	j++;
  	}
    else if(thief[j]<pol[i])  // increment lower value between 
       	j++;                  // left most thief/police
    else                      // because initial i(police) & j(thief)  
    	i++;                    // are '0'.
  }
 	cout<<"Maximum thieves caught: "<<count;
  return 0;
}

//////////////////////////////No arrays. Approach, if uncaught thief is left of police, find next thief else find next police/////////////

#include<bits/stdc++.h>
using namespace std;


int main()
{
  int n,k,count=0,p=-1,t=-1;
  cin>>n;
  char store[n];
  for(int i=0; i<n; i++){
    cin>>store[i];
  }
  for (int i = 0; i < n; i++) {
        if (store[i] == 'P') {
            p = i;
            break;
        }
    }
	for (int i = 0; i < n; i++) {
        if (store[i] == 'T') {
            t = i;
            break;
        }
    }
  cin>>k;
  if(p==-1 || t==-1){
	cout<<"Maximum thieves caught: 0";
	return 0;
  }
  while(p<n && t<n){
    if(abs(p-t)<=k){
      p++; 
      while(p<n && store[p]!='P')
        p++;
      t++;
      while( t<n && store[t]!='T')
        t++;
      count++;
  	}
    else if(t<p){
      t++;
      while(t<n && store[t]!='T' )
        t++;
    }
    else{
      p++;
      while(p<n && store[p]!='P' )
        p++;
    }
  }
 	cout<<"Maximum thieves caught: "<<count;
  return 0;
}
